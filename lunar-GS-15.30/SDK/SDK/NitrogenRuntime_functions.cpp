#pragma once

/*
* SDK generated by Dumper-8
*
* https://github.com/NotTacs/Dumper-8
*/

// Package: NitrogenRuntime

#include "Basic.hpp"

#include "NitrogenRuntime_classes.hpp"
#include "NitrogenRuntime_parameters.hpp"


namespace SDK
{

// Function NitrogenRuntime.FortAthenaMutator_Nitrogen.HandleGameStartCountdownEnd
// (Final, Native, Private)

void AFortAthenaMutator_Nitrogen::HandleGameStartCountdownEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_Nitrogen", "HandleGameStartCountdownEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.FortAthenaMutator_Nitrogen.HandleGroupTeleportComplete
// (Final, Native, Private)

void AFortAthenaMutator_Nitrogen::HandleGroupTeleportComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_Nitrogen", "HandleGroupTeleportComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.FortAthenaMutator_Nitrogen.HandlePlayerTeleportComplete
// (Final, Native, Private)
// Parameters:
// class AFortPlayerStateAthena*           PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_Nitrogen::HandlePlayerTeleportComplete(class AFortPlayerStateAthena* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_Nitrogen", "HandlePlayerTeleportComplete");

	Params::FortAthenaMutator_Nitrogen_HandlePlayerTeleportComplete Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.FortAthenaMutator_Nitrogen.OnNitrogenVehicleDestroyed
// (Final, Native, Private)
// Parameters:
// class AActor*                           VehicleDestroyed                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_Nitrogen::OnNitrogenVehicleDestroyed(class AActor* VehicleDestroyed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_Nitrogen", "OnNitrogenVehicleDestroyed");

	Params::FortAthenaMutator_Nitrogen_OnNitrogenVehicleDestroyed Parms{};

	Parms.VehicleDestroyed = VehicleDestroyed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.FortAthenaMutator_Nitrogen.OnNitrogenVehicleDriverChanged
// (Final, Native, Private)
// Parameters:
// const class AFortPlayerControllerAthena*NewController                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortAthenaVehicle*               Vehicle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_Nitrogen::OnNitrogenVehicleDriverChanged(const class AFortPlayerControllerAthena* NewController, class AFortAthenaVehicle* Vehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_Nitrogen", "OnNitrogenVehicleDriverChanged");

	Params::FortAthenaMutator_Nitrogen_OnNitrogenVehicleDriverChanged Parms{};

	Parms.NewController = NewController;
	Parms.Vehicle = Vehicle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.FortAthenaMutator_Nitrogen.OnNitrogenVehiclePlayerExit
// (Final, Native, Private)
// Parameters:
// const class AFortPlayerControllerAthena*PlayerController                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortAthenaVehicle*               Vehicle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaMutator_Nitrogen::OnNitrogenVehiclePlayerExit(const class AFortPlayerControllerAthena* PlayerController, class AFortAthenaVehicle* Vehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_Nitrogen", "OnNitrogenVehiclePlayerExit");

	Params::FortAthenaMutator_Nitrogen_OnNitrogenVehiclePlayerExit Parms{};

	Parms.PlayerController = PlayerController;
	Parms.Vehicle = Vehicle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.FortAthenaMutator_Nitrogen.OnRep_CurrentFares
// (Final, Native, Private)

void AFortAthenaMutator_Nitrogen::OnRep_CurrentFares()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_Nitrogen", "OnRep_CurrentFares");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.FortAthenaMutator_Nitrogen.OnRep_NitrogenGamePhase
// (Final, Native, Private)

void AFortAthenaMutator_Nitrogen::OnRep_NitrogenGamePhase()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_Nitrogen", "OnRep_NitrogenGamePhase");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.FortAthenaMutator_Nitrogen.OnRep_SortedTeamDataByScore
// (Final, Native, Private)

void AFortAthenaMutator_Nitrogen::OnRep_SortedTeamDataByScore()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_Nitrogen", "OnRep_SortedTeamDataByScore");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.FortCheatManager_Nitrogen.CompleteNitrogenFare
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UFortCheatManager_Nitrogen::CompleteNitrogenFare()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_Nitrogen", "CompleteNitrogenFare");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.FortCheatManager_Nitrogen.SetNitrogenNavDestinationToCurrentLocation
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UFortCheatManager_Nitrogen::SetNitrogenNavDestinationToCurrentLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_Nitrogen", "SetNitrogenNavDestinationToCurrentLocation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.FortCheatManager_Nitrogen.SetNitrogenScore
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// const int32                             Score                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const uint8                             ScoreReason                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_Nitrogen::SetNitrogenScore(const int32 Score, const uint8 ScoreReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_Nitrogen", "SetNitrogenScore");

	Params::FortCheatManager_Nitrogen_SetNitrogenScore Parms{};

	Parms.Score = Score;
	Parms.ScoreReason = ScoreReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.FortCheatManager_Nitrogen.SpawnNitrogenFare
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// const float                             PickUpDistance                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             DropOffDistance                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_Nitrogen::SpawnNitrogenFare(const float PickUpDistance, const float DropOffDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_Nitrogen", "SpawnNitrogenFare");

	Params::FortCheatManager_Nitrogen_SpawnNitrogenFare Parms{};

	Parms.PickUpDistance = PickUpDistance;
	Parms.DropOffDistance = DropOffDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.FortCheatManager_Nitrogen.TeleportToNitrogenRespawnActor
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// const int32                             Index_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_Nitrogen::TeleportToNitrogenRespawnActor(const int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_Nitrogen", "TeleportToNitrogenRespawnActor");

	Params::FortCheatManager_Nitrogen_TeleportToNitrogenRespawnActor Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.FortCheatManager_Nitrogen.TeleportToNitrogenSpawnActor
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// const int32                             Index_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_Nitrogen::TeleportToNitrogenSpawnActor(const int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_Nitrogen", "TeleportToNitrogenSpawnActor");

	Params::FortCheatManager_Nitrogen_TeleportToNitrogenSpawnActor Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.FortCheatManager_Nitrogen.TeleportToSquadStartAtIndex
// (Final, Native, Public, HasOutParams)
// Parameters:
// const int32                             Index_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FFortSquadStartSearchParamData&SearchParam                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString*                          TeleportReasonString                                   (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_Nitrogen::TeleportToSquadStartAtIndex(const int32 Index_0, const struct FFortSquadStartSearchParamData& SearchParam, class FString* TeleportReasonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_Nitrogen", "TeleportToSquadStartAtIndex");

	Params::FortCheatManager_Nitrogen_TeleportToSquadStartAtIndex Parms{};

	Parms.Index_0 = Index_0;
	Parms.SearchParam = std::move(SearchParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TeleportReasonString != nullptr)
		*TeleportReasonString = std::move(Parms.TeleportReasonString);
}


// Function NitrogenRuntime.NitrogenFare.DropOffPointExited
// (Final, Native, Protected)
// Parameters:
// class AAthenaTraversePoint*             TraversePoint                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortPlayerStateAthena*           PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANitrogenFare::DropOffPointExited(class AAthenaTraversePoint* TraversePoint, class AFortPlayerStateAthena* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenFare", "DropOffPointExited");

	Params::NitrogenFare_DropOffPointExited Parms{};

	Parms.TraversePoint = TraversePoint;
	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenFare.DropOffPointOverlapped
// (Final, Native, Public)
// Parameters:
// class AAthenaTraversePoint*             TraversePoint                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortPlayerStateAthena*           PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANitrogenFare::DropOffPointOverlapped(class AAthenaTraversePoint* TraversePoint, class AFortPlayerStateAthena* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenFare", "DropOffPointOverlapped");

	Params::NitrogenFare_DropOffPointOverlapped Parms{};

	Parms.TraversePoint = TraversePoint;
	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenFare.OnRep_PassengerPickedUp
// (Final, Native, Private)

void ANitrogenFare::OnRep_PassengerPickedUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenFare", "OnRep_PassengerPickedUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenFare.OnVehicleDestroyed
// (Final, Native, Private)
// Parameters:
// class AFortDagwoodVehicle*              DestroyedVehicle                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANitrogenFare::OnVehicleDestroyed(class AFortDagwoodVehicle* DestroyedVehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenFare", "OnVehicleDestroyed");

	Params::NitrogenFare_OnVehicleDestroyed Parms{};

	Parms.DestroyedVehicle = DestroyedVehicle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenFare.OnVehicleDriverChanged
// (Final, Native, Private)
// Parameters:
// const class AFortPlayerControllerAthena*NewDriver                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortAthenaVehicle*               Vehicle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANitrogenFare::OnVehicleDriverChanged(const class AFortPlayerControllerAthena* NewDriver, class AFortAthenaVehicle* Vehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenFare", "OnVehicleDriverChanged");

	Params::NitrogenFare_OnVehicleDriverChanged Parms{};

	Parms.NewDriver = NewDriver;
	Parms.Vehicle = Vehicle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenFare.OnVehicleEndPlay
// (Final, Native, Private)
// Parameters:
// class AActor*                           DestroyedVehicle                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANitrogenFare::OnVehicleEndPlay(class AActor* DestroyedVehicle, EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenFare", "OnVehicleEndPlay");

	Params::NitrogenFare_OnVehicleEndPlay Parms{};

	Parms.DestroyedVehicle = DestroyedVehicle;
	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenFare.PickUpPointExited
// (Final, Native, Protected)
// Parameters:
// class AAthenaTraversePoint*             TraversePoint                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortPlayerStateAthena*           PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANitrogenFare::PickUpPointExited(class AAthenaTraversePoint* TraversePoint, class AFortPlayerStateAthena* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenFare", "PickUpPointExited");

	Params::NitrogenFare_PickUpPointExited Parms{};

	Parms.TraversePoint = TraversePoint;
	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenFare.PickUpPointOverlapped
// (Final, Native, Public)
// Parameters:
// class AAthenaTraversePoint*             TraversePoint                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortPlayerStateAthena*           PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANitrogenFare::PickUpPointOverlapped(class AAthenaTraversePoint* TraversePoint, class AFortPlayerStateAthena* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenFare", "PickUpPointOverlapped");

	Params::NitrogenFare_PickUpPointOverlapped Parms{};

	Parms.TraversePoint = TraversePoint;
	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenFare.GetRewardValue
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const int32 ANitrogenFare::GetRewardValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenFare", "GetRewardValue");

	Params::NitrogenFare_GetRewardValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NitrogenRuntime.NitrogenPickup.OnNitrogenPickupOverlapped
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ANitrogenPickup::OnNitrogenPickupOverlapped(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenPickup", "OnNitrogenPickupOverlapped");

	Params::NitrogenPickup_OnNitrogenPickupOverlapped Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenPickup.OnRep_TeamHidden
// (Final, Native, Private)

void ANitrogenPickup::OnRep_TeamHidden()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenPickup", "OnRep_TeamHidden");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenFareValueIndicator.OnFareIndicatorValueChanged
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// const uint8                             NewIndicatorValue                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANitrogenFareValueIndicator::OnFareIndicatorValueChanged(const uint8 NewIndicatorValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenFareValueIndicator", "OnFareIndicatorValueChanged");

	Params::NitrogenFareValueIndicator_OnFareIndicatorValueChanged Parms{};

	Parms.NewIndicatorValue = NewIndicatorValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function NitrogenRuntime.NitrogenFareValueIndicator.OnRep_IndicatorValue
// (Final, Native, Private)

void ANitrogenFareValueIndicator::OnRep_IndicatorValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenFareValueIndicator", "OnRep_IndicatorValue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenNavArrow.RecallArrowToOwner
// (Native, Event, Protected, BlueprintEvent)

void ANitrogenNavArrow::RecallArrowToOwner()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenNavArrow", "RecallArrowToOwner");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenNavArrow.ThrowArrowToDestination
// (Native, Event, Protected, BlueprintEvent)

void ANitrogenNavArrow::ThrowArrowToDestination()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenNavArrow", "ThrowArrowToDestination");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenNavArrow.UpdatePrimaryColorForDistance
// (Native, Event, Protected, BlueprintEvent)

void ANitrogenNavArrow::UpdatePrimaryColorForDistance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenNavArrow", "UpdatePrimaryColorForDistance");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenNavArrow.UpdatePulseSpeedForDistance
// (Native, Event, Protected, BlueprintEvent)

void ANitrogenNavArrow::UpdatePulseSpeedForDistance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenNavArrow", "UpdatePulseSpeedForDistance");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenPassengerPawnComponent.ClientHandleFinishedCharacterCustomization
// (Final, Native, Private)
// Parameters:
// class AFortPlayerPawn*                  PlayerPawn                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNitrogenPassengerPawnComponent::ClientHandleFinishedCharacterCustomization(class AFortPlayerPawn* PlayerPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenPassengerPawnComponent", "ClientHandleFinishedCharacterCustomization");

	Params::NitrogenPassengerPawnComponent_ClientHandleFinishedCharacterCustomization Parms{};

	Parms.PlayerPawn = PlayerPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenPassengerPawnComponent.ClientPlayDeathEffects
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UNitrogenPassengerPawnComponent::ClientPlayDeathEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenPassengerPawnComponent", "ClientPlayDeathEffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NitrogenRuntime.NitrogenPassengerPawnComponent.OnRep_FareValueIndicator
// (Final, Native, Private)

void UNitrogenPassengerPawnComponent::OnRep_FareValueIndicator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenPassengerPawnComponent", "OnRep_FareValueIndicator");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenPassengerPawnComponent.OnRep_PassengerState
// (Final, Native, Private)

void UNitrogenPassengerPawnComponent::OnRep_PassengerState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenPassengerPawnComponent", "OnRep_PassengerState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenFareDataRepActor.OnRep_FareRepData
// (Final, Native, Public)

void ANitrogenFareDataRepActor::OnRep_FareRepData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenFareDataRepActor", "OnRep_FareRepData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenPlayerComponent.ClientHandleLoadingScreenStateChanged
// (Final, Native, Private)
// Parameters:
// class AFortPlayerControllerAthena*      PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnableLoadScreen                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      HUDReasonText                                          (Parm, NativeAccessSpecifierPublic)

void UNitrogenPlayerComponent::ClientHandleLoadingScreenStateChanged(class AFortPlayerControllerAthena* PlayerController, bool bEnableLoadScreen, const class FText& HUDReasonText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenPlayerComponent", "ClientHandleLoadingScreenStateChanged");

	Params::NitrogenPlayerComponent_ClientHandleLoadingScreenStateChanged Parms{};

	Parms.PlayerController = PlayerController;
	Parms.bEnableLoadScreen = bEnableLoadScreen;
	Parms.HUDReasonText = std::move(HUDReasonText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenPlayerComponent.HandleVehicleDestroyedBuildingActor
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AFortAthenaVehicle*               Vehicle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABuildingActor*                   BuildingActor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNitrogenPlayerComponent::HandleVehicleDestroyedBuildingActor(class AFortAthenaVehicle* Vehicle, class ABuildingActor* BuildingActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenPlayerComponent", "HandleVehicleDestroyedBuildingActor");

	Params::NitrogenPlayerComponent_HandleVehicleDestroyedBuildingActor Parms{};

	Parms.Vehicle = Vehicle;
	Parms.BuildingActor = BuildingActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenPlayerComponent.OnEnterVehicleDriver
// (Final, Native, Private)

void UNitrogenPlayerComponent::OnEnterVehicleDriver()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenPlayerComponent", "OnEnterVehicleDriver");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenPlayerComponent.OnEnterVehiclePassenger
// (Final, Native, Private)

void UNitrogenPlayerComponent::OnEnterVehiclePassenger()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenPlayerComponent", "OnEnterVehiclePassenger");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenPlayerComponent.OnExitVehicle
// (Final, Native, Private)

void UNitrogenPlayerComponent::OnExitVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenPlayerComponent", "OnExitVehicle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenPlayerComponent.OnGameStarted
// (Event, Protected, BlueprintEvent)

void UNitrogenPlayerComponent::OnGameStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenPlayerComponent", "OnGameStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NitrogenRuntime.NitrogenPlayerComponent.OnNitrogenGamePhaseChanged
// (Final, Native, Protected)
// Parameters:
// ENitrogenGamePhase                      NewGamePhase                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNitrogenPlayerComponent::OnNitrogenGamePhaseChanged(ENitrogenGamePhase NewGamePhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenPlayerComponent", "OnNitrogenGamePhaseChanged");

	Params::NitrogenPlayerComponent_OnNitrogenGamePhaseChanged Parms{};

	Parms.NewGamePhase = NewGamePhase;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenPlayerComponent.OnRep_CachedMutator
// (Final, Native, Private)

void UNitrogenPlayerComponent::OnRep_CachedMutator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenPlayerComponent", "OnRep_CachedMutator");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenPlayerComponent.OnRep_FareDataRepActor
// (Final, Native, Private)

void UNitrogenPlayerComponent::OnRep_FareDataRepActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenPlayerComponent", "OnRep_FareDataRepActor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenPlayerComponent.OnRep_FareInteractionData
// (Final, Native, Private)

void UNitrogenPlayerComponent::OnRep_FareInteractionData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenPlayerComponent", "OnRep_FareInteractionData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenPlayerComponent.GetDistanceFromClosestPassenger
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UNitrogenPlayerComponent::GetDistanceFromClosestPassenger() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenPlayerComponent", "GetDistanceFromClosestPassenger");

	Params::NitrogenPlayerComponent_GetDistanceFromClosestPassenger Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NitrogenRuntime.NitrogenPlayerComponent.GetDistanceFromDropOff
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UNitrogenPlayerComponent::GetDistanceFromDropOff() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenPlayerComponent", "GetDistanceFromDropOff");

	Params::NitrogenPlayerComponent_GetDistanceFromDropOff Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NitrogenRuntime.NitrogenTraversePoint.OnClientInteracted
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bOwnedByClient                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANitrogenTraversePoint::OnClientInteracted(bool bOwnedByClient)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenTraversePoint", "OnClientInteracted");

	Params::NitrogenTraversePoint_OnClientInteracted Parms{};

	Parms.bOwnedByClient = bOwnedByClient;

	UObject::ProcessEvent(Func, &Parms);
}


// Function NitrogenRuntime.NitrogenTraversePoint.OnClientVisibiltyUpdated
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewHidden                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANitrogenTraversePoint::OnClientVisibiltyUpdated(bool bNewHidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenTraversePoint", "OnClientVisibiltyUpdated");

	Params::NitrogenTraversePoint_OnClientVisibiltyUpdated Parms{};

	Parms.bNewHidden = bNewHidden;

	UObject::ProcessEvent(Func, &Parms);
}


// Function NitrogenRuntime.NitrogenTraversePoint.OnEndOverlap
// (Final, Native, Private)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANitrogenTraversePoint::OnEndOverlap(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenTraversePoint", "OnEndOverlap");

	Params::NitrogenTraversePoint_OnEndOverlap Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenTraversePoint.OnVehicleDriverChanged
// (Final, Native, Protected)
// Parameters:
// const class AFortPlayerControllerAthena*NewController                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortAthenaVehicle*               Vehicle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANitrogenTraversePoint::OnVehicleDriverChanged(const class AFortPlayerControllerAthena* NewController, class AFortAthenaVehicle* Vehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenTraversePoint", "OnVehicleDriverChanged");

	Params::NitrogenTraversePoint_OnVehicleDriverChanged Parms{};

	Parms.NewController = NewController;
	Parms.Vehicle = Vehicle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenVehicleComponent.HandleVehicleOnHit
// (Final, Native, Private, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UNitrogenVehicleComponent::HandleVehicleOnHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenVehicleComponent", "HandleVehicleOnHit");

	Params::NitrogenVehicleComponent_HandleVehicleOnHit Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenVehicleComponent.SetBoostFXActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bActive                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNitrogenVehicleComponent::SetBoostFXActive(const bool bActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenVehicleComponent", "SetBoostFXActive");

	Params::NitrogenVehicleComponent_SetBoostFXActive Parms{};

	Parms.bActive = bActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenVehicleComponent.TimelineBoostFXUpdate_JetFlamesHeight
// (Final, Native, Private)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNitrogenVehicleComponent::TimelineBoostFXUpdate_JetFlamesHeight(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenVehicleComponent", "TimelineBoostFXUpdate_JetFlamesHeight");

	Params::NitrogenVehicleComponent_TimelineBoostFXUpdate_JetFlamesHeight Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenVehicleComponent.TimelineBoostFXUpdate_JetSparksCounts
// (Final, Native, Private)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNitrogenVehicleComponent::TimelineBoostFXUpdate_JetSparksCounts(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenVehicleComponent", "TimelineBoostFXUpdate_JetSparksCounts");

	Params::NitrogenVehicleComponent_TimelineBoostFXUpdate_JetSparksCounts Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitrogenRuntime.NitrogenVehicleComponent.IsVehicleUnderCleanupWaterDepth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNitrogenVehicleComponent::IsVehicleUnderCleanupWaterDepth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NitrogenVehicleComponent", "IsVehicleUnderCleanupWaterDepth");

	Params::NitrogenVehicleComponent_IsVehicleUnderCleanupWaterDepth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

