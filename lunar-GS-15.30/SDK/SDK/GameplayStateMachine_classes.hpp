#pragma once

/*
* SDK generated by Dumper-8
*
* https://github.com/NotTacs/Dumper-8
*/

// Package: GameplayStateMachine

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "GameplayStateMachine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class GameplayStateMachine.GameplayState
// 0x0050 (0x0078 - 0x0028)
class UGameplayState : public UObject
{
public:
	struct FGameplayTag                           StateId;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  StateRuntimeTags;                                  // 0x0030(0x0020)(Transient, Protected, NativeAccessSpecifierProtected)
	bool                                          bEvaluateTransition;                               // 0x0050(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bReplicates;                                       // 0x0051(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bStateEnded;                                       // 0x0052(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_53[0x5];                                       // 0x0053(0x0005)(Fixing Size After Last Property [ Dumper-8 ])
	class UGameplayStateMachine*                  CachedGameplayStateMachine;                        // 0x0058(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGameplayStateMachineManager*           CachedStateMachineManager;                         // 0x0060(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGameplayStateMachineSubsystem*         CachedStateMachineSubSystem;                       // 0x0068(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGameplayState*                         Hack_StateToDelayProcess;                          // 0x0070(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void AddStateRuntimeTag(const struct FGameplayTag& AddedTag);
	void BeginStateEvent(const struct FGameplayTag& PrevStateId);
	void BeginStateEventClient(const struct FGameplayTag& PrevStateId);
	void BeginStateEventServer(const struct FGameplayTag& PrevStateId);
	void EndStateEvent(const struct FGameplayTag& NextStateId);
	void EndStateEventClient(const struct FGameplayTag& NextStateId);
	void EndStateEventServer(const struct FGameplayTag& NextStateId);
	void MarkStateToEvaluateTransitions();
	void RemoveStateRuntimeTag(const struct FGameplayTag& RemovedTag);
	void UpdateStateEvent(const float DeltaTime);
	void UpdateStateEventClient(const float DeltaTime);
	void UpdateStateEventServer(const float DeltaTime);

	class UGameplayStateMachine* GetGameplayStateMachine() const;
	class AActor* GetOwningActor() const;
	struct FGameplayTag GetStateId() const;
	const struct FGameplayTagContainer GetStateRuntimeTags() const;
	bool HasAuthority() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayState">();
	}
	static class UGameplayState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayState>();
	}
};

// Class GameplayStateMachine.GameplayStateMachine
// 0x0038 (0x00B0 - 0x0078)
class UGameplayStateMachine final : public UGameplayState
{
public:
	bool                                          bPubliclyBroadcast;                                // 0x0078(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPersistDelegatesOnUnregistration;                 // 0x0079(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-8 ])
	struct FGameplayTag                           StateMachineId;                                    // 0x007C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-8 ])
	struct FActiveGameplayStateData               ActiveGameplayStateData;                           // 0x0088(0x0010)(Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FGameplayStateSettings>         GameplayStateSettings;                             // 0x0098(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           InitialGameplayStateId;                            // 0x00A8(0x0008)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void EvaluateStateTransition();
	void OnRep_ActiveGameplayStateData();
	void SetState(const struct FGameplayTag& InStateId);

	struct FGameplayTag GetActiveStateId() const;
	class UGameplayState* GetActiveStateObject() const;
	struct FGameplayTag GetStateMachineId() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayStateMachine">();
	}
	static class UGameplayStateMachine* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayStateMachine>();
	}
};

// Class GameplayStateMachine.GameplayStateMachineManager
// 0x0120 (0x01D0 - 0x00B0)
class UGameplayStateMachineManager final : public UActorComponent
{
public:
	struct FGameplayStateMachineArray             StateMachineList;                                  // 0x00B0(0x0120)(Net, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayStateMachineManager">();
	}
	static class UGameplayStateMachineManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayStateMachineManager>();
	}
};

// Class GameplayStateMachine.GameplayStateMachineSubsystem
// 0x0050 (0x0080 - 0x0030)
class UGameplayStateMachineSubsystem final : public UGameInstanceSubsystem
{
public:
	TMap<struct FGameplayTag, struct FGameplayStateMachineData> StateMachineMap;                     // 0x0030(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayStateMachineSubsystem">();
	}
	static class UGameplayStateMachineSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayStateMachineSubsystem>();
	}
};

}

