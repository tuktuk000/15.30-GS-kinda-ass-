#pragma once

/*
* SDK generated by Dumper-8
*
* https://github.com/NotTacs/Dumper-8
*/

// Package: Math_Transform

#include "Basic.hpp"

#include "Math_Transform_classes.hpp"
#include "Math_Transform_parameters.hpp"


namespace SDK
{

// Function Math_Transform.Transform.Create
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UVector3*                         __verse_0x7AF6BB5D_position                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UVector3*                         __verse_0x7314EE20_eulerRotation                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UVector3*                         __verse_0xA8267C47_scale                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTransform*                       RetVal                                                 (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UTransform* UTransform::Create(class UVector3* __verse_0x7AF6BB5D_position, class UVector3* __verse_0x7314EE20_eulerRotation, class UVector3* __verse_0xA8267C47_scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Transform", "Create");

	Params::Transform_Create Parms{};

	Parms.__verse_0x7AF6BB5D_position = __verse_0x7AF6BB5D_position;
	Parms.__verse_0x7314EE20_eulerRotation = __verse_0x7314EE20_eulerRotation;
	Parms.__verse_0xA8267C47_scale = __verse_0xA8267C47_scale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Math_Transform.Transform.createZero
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UTransform*                       RetVal                                                 (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UTransform* UTransform::createZero()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Transform", "createZero");

	Params::Transform_createZero Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Math_Transform.Transform.$InitCDO
// ()

void UTransform::_InitCDO()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Transform", "$InitCDO");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Math_Transform.Transform.$InitInstance
// ()

void UTransform::_InitInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Transform", "$InitInstance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Math_Transform.Transform.GetPositionX
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   RetVal                                                 (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UTransform::GetPositionX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Transform", "GetPositionX");

	Params::Transform_GetPositionX Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Math_Transform.Transform.GetPositionY
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   RetVal                                                 (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UTransform::GetPositionY()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Transform", "GetPositionY");

	Params::Transform_GetPositionY Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Math_Transform.Transform.GetPositionZ
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   RetVal                                                 (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UTransform::GetPositionZ()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Transform", "GetPositionZ");

	Params::Transform_GetPositionZ Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Math_Transform.Transform.GetRotationPitch
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   RetVal                                                 (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UTransform::GetRotationPitch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Transform", "GetRotationPitch");

	Params::Transform_GetRotationPitch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Math_Transform.Transform.GetRotationRoll
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   RetVal                                                 (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UTransform::GetRotationRoll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Transform", "GetRotationRoll");

	Params::Transform_GetRotationRoll Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Math_Transform.Transform.GetRotationYaw
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   RetVal                                                 (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UTransform::GetRotationYaw()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Transform", "GetRotationYaw");

	Params::Transform_GetRotationYaw Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Math_Transform.Transform.GetScaleX
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   RetVal                                                 (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UTransform::GetScaleX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Transform", "GetScaleX");

	Params::Transform_GetScaleX Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Math_Transform.Transform.GetScaleY
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   RetVal                                                 (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UTransform::GetScaleY()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Transform", "GetScaleY");

	Params::Transform_GetScaleY Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Math_Transform.Transform.GetScaleZ
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   RetVal                                                 (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UTransform::GetScaleZ()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Transform", "GetScaleZ");

	Params::Transform_GetScaleZ Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

