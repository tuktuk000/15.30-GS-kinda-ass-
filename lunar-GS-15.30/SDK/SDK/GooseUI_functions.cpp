#pragma once

/*
* SDK generated by Dumper-8
*
* https://github.com/NotTacs/Dumper-8
*/

// Package: GooseUI

#include "Basic.hpp"

#include "GooseUI_classes.hpp"
#include "GooseUI_parameters.hpp"


namespace SDK
{

// Function GooseUI.GooseInventoryWidget.CloseWidget
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UGooseInventoryWidget::CloseWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GooseInventoryWidget", "CloseWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GooseUI.GooseInventoryWidget.OpenWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UTexture2D*                       IconTexture                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UFortWorldItemDefinition*   ItemDef                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGooseInventoryWidget::OpenWidget(class UTexture2D* IconTexture, const class UFortWorldItemDefinition* ItemDef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GooseInventoryWidget", "OpenWidget");

	Params::GooseInventoryWidget_OpenWidget Parms{};

	Parms.IconTexture = IconTexture;
	Parms.ItemDef = ItemDef;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GooseUI.GooseWidgetBase.OnUpdateNumberOfPlanes
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   FriendlyPlaneCount                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EnemyPlaneCount                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGooseWidgetBase::OnUpdateNumberOfPlanes(int32 FriendlyPlaneCount, int32 EnemyPlaneCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GooseWidgetBase", "OnUpdateNumberOfPlanes");

	Params::GooseWidgetBase_OnUpdateNumberOfPlanes Parms{};

	Parms.FriendlyPlaneCount = FriendlyPlaneCount;
	Parms.EnemyPlaneCount = EnemyPlaneCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GooseUI.GooseLeaderboardWidget.UpdateLeaderboardUI
// (BlueprintCosmetic, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const TArray<struct FGooseLeaderboardData>&SortedLeaderboardInfo                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGooseLeaderboardWidget::UpdateLeaderboardUI(const TArray<struct FGooseLeaderboardData>& SortedLeaderboardInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GooseLeaderboardWidget", "UpdateLeaderboardUI");

	Params::GooseLeaderboardWidget_UpdateLeaderboardUI Parms{};

	Parms.SortedLeaderboardInfo = std::move(SortedLeaderboardInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GooseUI.GoosePlanePickupWidget.CloseWidget
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UGoosePlanePickupWidget::CloseWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GoosePlanePickupWidget", "CloseWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GooseUI.GoosePlanePickupWidget.OpenWidget
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// int32                                   DisplayIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ChestName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      DisplayText                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGoosePlanePickupWidget::OpenWidget(int32 DisplayIndex, class FName ChestName, const class FText& DisplayText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GoosePlanePickupWidget", "OpenWidget");

	Params::GoosePlanePickupWidget_OpenWidget Parms{};

	Parms.DisplayIndex = DisplayIndex;
	Parms.ChestName = ChestName;
	Parms.DisplayText = std::move(DisplayText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GooseUI.GoosePlaneWeaponWidget.CloseWidget
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UGoosePlaneWeaponWidget::CloseWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GoosePlaneWeaponWidget", "CloseWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GooseUI.GoosePlaneWeaponWidget.OpenWidget
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DisplayIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGooseWeaponDisplayData&   InDisplayData                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   StartTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGoosePlaneWeaponWidget::OpenWidget(int32 DisplayIndex, const struct FGooseWeaponDisplayData& InDisplayData, float StartTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GoosePlaneWeaponWidget", "OpenWidget");

	Params::GoosePlaneWeaponWidget_OpenWidget Parms{};

	Parms.DisplayIndex = DisplayIndex;
	Parms.InDisplayData = std::move(InDisplayData);
	Parms.StartTime = StartTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GooseUI.GooseRadarIconWidget.OnNewIconState
// (Event, Protected, BlueprintEvent)
// Parameters:
// ERadarIconState                         NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGooseRadarIconWidget::OnNewIconState(ERadarIconState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GooseRadarIconWidget", "OnNewIconState");

	Params::GooseRadarIconWidget_OnNewIconState Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GooseUI.GooseRadarWidgetBase.OnPlaneRep
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const TArray<class AFortAthenaVehicle*>&Planes                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGooseRadarWidgetBase::OnPlaneRep(const TArray<class AFortAthenaVehicle*>& Planes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GooseRadarWidgetBase", "OnPlaneRep");

	Params::GooseRadarWidgetBase_OnPlaneRep Parms{};

	Parms.Planes = std::move(Planes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GooseUI.GooseSkydivingWidget.OnEndSkydiving
// (Event, Protected, BlueprintEvent)

void UGooseSkydivingWidget::OnEndSkydiving()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GooseSkydivingWidget", "OnEndSkydiving");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GooseUI.GooseSkydivingWidget.OnStartSkydiving
// (Event, Protected, BlueprintEvent)

void UGooseSkydivingWidget::OnStartSkydiving()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GooseSkydivingWidget", "OnStartSkydiving");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GooseUI.GooseTargetLeadingWidget.OnPlayerControllerPawnChanged
// (Final, Native, Private)
// Parameters:
// class AFortPawn*                        NewPawn                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGooseTargetLeadingWidget::OnPlayerControllerPawnChanged(class AFortPawn* NewPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GooseTargetLeadingWidget", "OnPlayerControllerPawnChanged");

	Params::GooseTargetLeadingWidget_OnPlayerControllerPawnChanged Parms{};

	Parms.NewPawn = NewPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GooseUI.GooseTargetLeadingWidget.OnPlayerEnterVehicle
// (Final, Native, Private)

void UGooseTargetLeadingWidget::OnPlayerEnterVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GooseTargetLeadingWidget", "OnPlayerEnterVehicle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GooseUI.GooseTargetLeadingWidget.OnPlayerExitVehicle
// (Final, Native, Private)

void UGooseTargetLeadingWidget::OnPlayerExitVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GooseTargetLeadingWidget", "OnPlayerExitVehicle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GooseUI.GooseTargetLeadingWidget.OnPlayerWeaponChanged
// (Final, Native, Private)
// Parameters:
// class AFortPawn*                        InPawn                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortWeapon*                      InNewWeapon                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortWeapon*                      InPlayerWeapon                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGooseTargetLeadingWidget::OnPlayerWeaponChanged(class AFortPawn* InPawn, class AFortWeapon* InNewWeapon, class AFortWeapon* InPlayerWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GooseTargetLeadingWidget", "OnPlayerWeaponChanged");

	Params::GooseTargetLeadingWidget_OnPlayerWeaponChanged Parms{};

	Parms.InPawn = InPawn;
	Parms.InNewWeapon = InNewWeapon;
	Parms.InPlayerWeapon = InPlayerWeapon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GooseUI.GooseTargetLeadingWidget.ShowLeadingReticle
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bShow                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGooseTargetLeadingWidget::ShowLeadingReticle(bool bShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GooseTargetLeadingWidget", "ShowLeadingReticle");

	Params::GooseTargetLeadingWidget_ShowLeadingReticle Parms{};

	Parms.bShow = bShow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GooseUI.GooseTargetLeadingWidget.UpdateLeadingReticlePosition
// (Event, Protected, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector&                   TargetPosition                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InDeltaTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGooseTargetLeadingWidget::UpdateLeadingReticlePosition(const struct FVector& TargetPosition, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GooseTargetLeadingWidget", "UpdateLeadingReticlePosition");

	Params::GooseTargetLeadingWidget_UpdateLeadingReticlePosition Parms{};

	Parms.TargetPosition = std::move(TargetPosition);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GooseUI.GooseTargetLeadingWidget.UpdateTargetVehicle
// (Final, Native, Private)

void UGooseTargetLeadingWidget::UpdateTargetVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GooseTargetLeadingWidget", "UpdateTargetVehicle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

