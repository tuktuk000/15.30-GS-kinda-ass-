#pragma once

/*
* SDK generated by Dumper-8
*
* https://github.com/NotTacs/Dumper-8
*/

// Package: BPWaveLIbrary

#include "Basic.hpp"

#include "BPWaveLIbrary_classes.hpp"
#include "BPWaveLIbrary_parameters.hpp"


namespace SDK
{

// Function BPWaveLIbrary.BPWaveLIbrary_C.Gerstner Wave
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector&                   Pos                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector2D&                 K                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   W                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Steepness                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Phase_Offset                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D*                       XY                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  Z                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Normal                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPWaveLIbrary_C::Gerstner_Wave(const struct FVector& Pos, const struct FVector2D& K, float W, float A, float Steepness, float Phase_Offset, class UObject* __WorldContext, struct FVector2D* XY, float* Z, struct FVector* Normal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPWaveLIbrary_C", "Gerstner Wave");

	Params::BPWaveLIbrary_C_Gerstner_Wave Parms{};

	Parms.Pos = std::move(Pos);
	Parms.K = std::move(K);
	Parms.W = W;
	Parms.A = A;
	Parms.Steepness = Steepness;
	Parms.Phase_Offset = Phase_Offset;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (XY != nullptr)
		*XY = std::move(Parms.XY);

	if (Z != nullptr)
		*Z = Parms.Z;

	if (Normal != nullptr)
		*Normal = std::move(Parms.Normal);
}


// Function BPWaveLIbrary.BPWaveLIbrary_C.Gerstner Wave_MPC_Deep
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector&                   Pos                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FWaveParams&               Wave_Params                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Phase_Offset                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D*                       XY                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  Z                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Normal                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  Wave_Pos                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  Wave_Time                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  Wave_Sine                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPWaveLIbrary_C::Gerstner_Wave_MPC_Deep(const struct FVector& Pos, const struct FWaveParams& Wave_Params, float Time, float Phase_Offset, class UObject* __WorldContext, struct FVector2D* XY, float* Z, struct FVector* Normal, float* Wave_Pos, float* Wave_Time, float* Wave_Sine)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPWaveLIbrary_C", "Gerstner Wave_MPC_Deep");

	Params::BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep Parms{};

	Parms.Pos = std::move(Pos);
	Parms.Wave_Params = std::move(Wave_Params);
	Parms.Time = Time;
	Parms.Phase_Offset = Phase_Offset;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (XY != nullptr)
		*XY = std::move(Parms.XY);

	if (Z != nullptr)
		*Z = Parms.Z;

	if (Normal != nullptr)
		*Normal = std::move(Parms.Normal);

	if (Wave_Pos != nullptr)
		*Wave_Pos = Parms.Wave_Pos;

	if (Wave_Time != nullptr)
		*Wave_Time = Parms.Wave_Time;

	if (Wave_Sine != nullptr)
		*Wave_Sine = Parms.Wave_Sine;
}


// Function BPWaveLIbrary.BPWaveLIbrary_C.Exp2
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Depth                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Density                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPWaveLIbrary_C::Exp2(float Depth, float Density, class UObject* __WorldContext, float* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPWaveLIbrary_C", "Exp2");

	Params::BPWaveLIbrary_C_Exp2 Parms{};

	Parms.Depth = Depth;
	Parms.Density = Density;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BPWaveLIbrary.BPWaveLIbrary_C.Wavelength to Wavespeed
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Wavelength                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  s                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPWaveLIbrary_C::Wavelength_to_Wavespeed(float Wavelength, class UObject* __WorldContext, float* s)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPWaveLIbrary_C", "Wavelength to Wavespeed");

	Params::BPWaveLIbrary_C_Wavelength_to_Wavespeed Parms{};

	Parms.Wavelength = Wavelength;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (s != nullptr)
		*s = Parms.s;
}


// Function BPWaveLIbrary.BPWaveLIbrary_C.Wave Rotation Setup
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Wave_Pos                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Wave_Time                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Crash_Offset                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Wavelength                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Wave_Direction                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Local_Pivot                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Beach_X_Pos                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Break_Distance                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Wave_Sine                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Crest_Power                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Start_Crash_Power                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   End_Crash_Power                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MaxRotation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  Rotation_Angle                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         World_Pivot                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  Raw_Shore_Mask                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPWaveLIbrary_C::Wave_Rotation_Setup(float Wave_Pos, float Wave_Time, float Crash_Offset, float Wavelength, const struct FVector& Wave_Direction, const struct FVector& Local_Pivot, float Beach_X_Pos, float Break_Distance, float Wave_Sine, float Crest_Power, float Start_Crash_Power, float End_Crash_Power, float MaxRotation, class UObject* __WorldContext, float* Rotation_Angle, struct FVector* World_Pivot, float* Raw_Shore_Mask)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPWaveLIbrary_C", "Wave Rotation Setup");

	Params::BPWaveLIbrary_C_Wave_Rotation_Setup Parms{};

	Parms.Wave_Pos = Wave_Pos;
	Parms.Wave_Time = Wave_Time;
	Parms.Crash_Offset = Crash_Offset;
	Parms.Wavelength = Wavelength;
	Parms.Wave_Direction = std::move(Wave_Direction);
	Parms.Local_Pivot = std::move(Local_Pivot);
	Parms.Beach_X_Pos = Beach_X_Pos;
	Parms.Break_Distance = Break_Distance;
	Parms.Wave_Sine = Wave_Sine;
	Parms.Crest_Power = Crest_Power;
	Parms.Start_Crash_Power = Start_Crash_Power;
	Parms.End_Crash_Power = End_Crash_Power;
	Parms.MaxRotation = MaxRotation;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Rotation_Angle != nullptr)
		*Rotation_Angle = Parms.Rotation_Angle;

	if (World_Pivot != nullptr)
		*World_Pivot = std::move(Parms.World_Pivot);

	if (Raw_Shore_Mask != nullptr)
		*Raw_Shore_Mask = Parms.Raw_Shore_Mask;
}


// Function BPWaveLIbrary.BPWaveLIbrary_C.Finalize Gerstner Normal
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector&                   N                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         N_                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPWaveLIbrary_C::Finalize_Gerstner_Normal(const struct FVector& N, class UObject* __WorldContext, struct FVector* N_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPWaveLIbrary_C", "Finalize Gerstner Normal");

	Params::BPWaveLIbrary_C_Finalize_Gerstner_Normal Parms{};

	Parms.N = std::move(N);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (N_ != nullptr)
		*N_ = std::move(Parms.N_);
}


// Function BPWaveLIbrary.BPWaveLIbrary_C.Rotation from Normal
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector&                   X_Vector                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Z_Vector__Normal_                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Additional_Tilt                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Additional_Pitch                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        Rotator                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPWaveLIbrary_C::Rotation_from_Normal(const struct FVector& X_Vector, const struct FVector& Z_Vector__Normal_, float Additional_Tilt, float Additional_Pitch, class UObject* __WorldContext, struct FRotator* Rotator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPWaveLIbrary_C", "Rotation from Normal");

	Params::BPWaveLIbrary_C_Rotation_from_Normal Parms{};

	Parms.X_Vector = std::move(X_Vector);
	Parms.Z_Vector__Normal_ = std::move(Z_Vector__Normal_);
	Parms.Additional_Tilt = Additional_Tilt;
	Parms.Additional_Pitch = Additional_Pitch;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Rotator != nullptr)
		*Rotator = std::move(Parms.Rotator);
}


// Function BPWaveLIbrary.BPWaveLIbrary_C.Gerstner 3 Waves
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector&                   Pos                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Num_Waves                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FWaveParams>&             Wave_Array                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Water_Depth                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Break_Tangent                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Break_Cos                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D*                       XY                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  Z                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Normal                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  Wave_0_Pos                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  Wave_0_Time                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  Wave_0_Sine                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPWaveLIbrary_C::Gerstner_3_Waves(const struct FVector& Pos, int32 Num_Waves, TArray<struct FWaveParams>& Wave_Array, float Time, float Water_Depth, float Break_Tangent, float Break_Cos, class UObject* __WorldContext, struct FVector2D* XY, float* Z, struct FVector* Normal, float* Wave_0_Pos, float* Wave_0_Time, float* Wave_0_Sine)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPWaveLIbrary_C", "Gerstner 3 Waves");

	Params::BPWaveLIbrary_C_Gerstner_3_Waves Parms{};

	Parms.Pos = std::move(Pos);
	Parms.Num_Waves = Num_Waves;
	Parms.Wave_Array = std::move(Wave_Array);
	Parms.Time = Time;
	Parms.Water_Depth = Water_Depth;
	Parms.Break_Tangent = Break_Tangent;
	Parms.Break_Cos = Break_Cos;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Wave_Array = std::move(Parms.Wave_Array);

	if (XY != nullptr)
		*XY = std::move(Parms.XY);

	if (Z != nullptr)
		*Z = Parms.Z;

	if (Normal != nullptr)
		*Normal = std::move(Parms.Normal);

	if (Wave_0_Pos != nullptr)
		*Wave_0_Pos = Parms.Wave_0_Pos;

	if (Wave_0_Time != nullptr)
		*Wave_0_Time = Parms.Wave_0_Time;

	if (Wave_0_Sine != nullptr)
		*Wave_0_Sine = Parms.Wave_0_Sine;
}


// Function BPWaveLIbrary.BPWaveLIbrary_C.Gerstner Wave_MPC_Shallow
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector&                   Pos                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FWaveParams&               Wave_Params                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Phase_Offset                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Water_Depth__wave0_only_                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D*                       XY                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  Z                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Normal                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  Wave_Pos                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  Wave_Time                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  Wave_Sine                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPWaveLIbrary_C::Gerstner_Wave_MPC_Shallow(const struct FVector& Pos, const struct FWaveParams& Wave_Params, float Time, float Phase_Offset, float Water_Depth__wave0_only_, class UObject* __WorldContext, struct FVector2D* XY, float* Z, struct FVector* Normal, float* Wave_Pos, float* Wave_Time, float* Wave_Sine)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPWaveLIbrary_C", "Gerstner Wave_MPC_Shallow");

	Params::BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow Parms{};

	Parms.Pos = std::move(Pos);
	Parms.Wave_Params = std::move(Wave_Params);
	Parms.Time = Time;
	Parms.Phase_Offset = Phase_Offset;
	Parms.Water_Depth__wave0_only_ = Water_Depth__wave0_only_;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (XY != nullptr)
		*XY = std::move(Parms.XY);

	if (Z != nullptr)
		*Z = Parms.Z;

	if (Normal != nullptr)
		*Normal = std::move(Parms.Normal);

	if (Wave_Pos != nullptr)
		*Wave_Pos = Parms.Wave_Pos;

	if (Wave_Time != nullptr)
		*Wave_Time = Parms.Wave_Time;

	if (Wave_Sine != nullptr)
		*Wave_Sine = Parms.Wave_Sine;
}


// Function BPWaveLIbrary.BPWaveLIbrary_C.Water Depth to Wavespeed
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Water_Depth                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  s                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPWaveLIbrary_C::Water_Depth_to_Wavespeed(float Water_Depth, class UObject* __WorldContext, float* s)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPWaveLIbrary_C", "Water Depth to Wavespeed");

	Params::BPWaveLIbrary_C_Water_Depth_to_Wavespeed Parms{};

	Parms.Water_Depth = Water_Depth;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (s != nullptr)
		*s = Parms.s;
}


// Function BPWaveLIbrary.BPWaveLIbrary_C.Harvest Wave Params
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPWaveLIbrary_C::Harvest_Wave_Params(class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPWaveLIbrary_C", "Harvest Wave Params");

	Params::BPWaveLIbrary_C_Harvest_Wave_Params Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPWaveLIbrary.BPWaveLIbrary_C.Generate Wave Spectrum
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FWaveSpectrumSettings&           Spectrum                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FWaterWaveParams>*        Waves                                                  (Parm, OutParm, HasGetValueTypeHash)

void UBPWaveLIbrary_C::Generate_Wave_Spectrum(struct FWaveSpectrumSettings& Spectrum, class UObject* __WorldContext, TArray<struct FWaterWaveParams>* Waves)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPWaveLIbrary_C", "Generate Wave Spectrum");

	Params::BPWaveLIbrary_C_Generate_Wave_Spectrum Parms{};

	Parms.Spectrum = std::move(Spectrum);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Spectrum = std::move(Parms.Spectrum);

	if (Waves != nullptr)
		*Waves = std::move(Parms.Waves);
}

}

