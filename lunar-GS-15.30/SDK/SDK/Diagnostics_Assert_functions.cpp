#pragma once

/*
* SDK generated by Dumper-8
*
* https://github.com/NotTacs/Dumper-8
*/

// Package: Diagnostics_Assert

#include "Basic.hpp"

#include "Diagnostics_Assert_classes.hpp"
#include "Diagnostics_Assert_parameters.hpp"


namespace SDK
{

// Function Diagnostics_Assert.Assert.cmp
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// uint8                                   __verse_0x123742AA_expression                          (Parm, NoDestructor)

void UAssert::cmp(uint8 __verse_0x123742AA_expression)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Assert", "cmp");

	Params::Assert_cmp Parms{};

	Parms.__verse_0x123742AA_expression = __verse_0x123742AA_expression;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Diagnostics_Assert.Assert.cmpMsg
// (Native, Static, Public, BlueprintCallable)
// Parameters:
// uint8                                   __verse_0x123742AA_expression                          (Parm, NoDestructor)
// const class FString&                    __verse_0xD212B012_message                             (Parm, ZeroConstructor, HasGetValueTypeHash)

void UAssert::cmpMsg(uint8 __verse_0x123742AA_expression, const class FString& __verse_0xD212B012_message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Assert", "cmpMsg");

	Params::Assert_cmpMsg Parms{};

	Parms.__verse_0x123742AA_expression = __verse_0x123742AA_expression;
	Parms.__verse_0xD212B012_message = std::move(__verse_0xD212B012_message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Diagnostics_Assert.Assert.$InitCDO
// ()

void UAssert::_InitCDO()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Assert", "$InitCDO");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Diagnostics_Assert.Assert.$InitInstance
// ()

void UAssert::_InitInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Assert", "$InitInstance");

	UObject::ProcessEvent(Func, nullptr);
}

}

