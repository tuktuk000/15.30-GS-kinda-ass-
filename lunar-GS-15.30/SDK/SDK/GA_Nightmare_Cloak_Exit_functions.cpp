#pragma once

/*
* SDK generated by Dumper-8
*
* https://github.com/NotTacs/Dumper-8
*/

// Package: GA_Nightmare_Cloak_Exit

#include "Basic.hpp"

#include "GA_Nightmare_Cloak_Exit_classes.hpp"
#include "GA_Nightmare_Cloak_Exit_parameters.hpp"


namespace SDK
{

// Function GA_Nightmare_Cloak_Exit.GA_Nightmare_Cloak_Exit_C.ExecuteUbergraph_GA_Nightmare_Cloak_Exit
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_Nightmare_Cloak_Exit_C::ExecuteUbergraph_GA_Nightmare_Cloak_Exit(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Nightmare_Cloak_Exit_C", "ExecuteUbergraph_GA_Nightmare_Cloak_Exit");

	Params::GA_Nightmare_Cloak_Exit_C_ExecuteUbergraph_GA_Nightmare_Cloak_Exit Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_Nightmare_Cloak_Exit.GA_Nightmare_Cloak_Exit_C.K2_OnEndAbility
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bWasCancelled                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UGA_Nightmare_Cloak_Exit_C::K2_OnEndAbility(bool bWasCancelled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Nightmare_Cloak_Exit_C", "K2_OnEndAbility");

	Params::GA_Nightmare_Cloak_Exit_C_K2_OnEndAbility Parms{};

	Parms.bWasCancelled = bWasCancelled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_Nightmare_Cloak_Exit.GA_Nightmare_Cloak_Exit_C.K2_ActivateAbility
// (Event, Protected, BlueprintEvent)

void UGA_Nightmare_Cloak_Exit_C::K2_ActivateAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Nightmare_Cloak_Exit_C", "K2_ActivateAbility");

	UObject::ProcessEvent(Func, nullptr);
}

}

