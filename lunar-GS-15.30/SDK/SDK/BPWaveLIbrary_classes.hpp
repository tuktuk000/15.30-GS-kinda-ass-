#pragma once

/*
* SDK generated by Dumper-8
*
* https://github.com/NotTacs/Dumper-8
*/

// Package: BPWaveLIbrary

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPWaveLIbrary.BPWaveLIbrary_C
// 0x0000 (0x0028 - 0x0028)
class UBPWaveLIbrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void Gerstner_Wave(const struct FVector& Pos, const struct FVector2D& K, float W, float A, float Steepness, float Phase_Offset, class UObject* __WorldContext, struct FVector2D* XY, float* Z, struct FVector* Normal);
	static void Gerstner_Wave_MPC_Deep(const struct FVector& Pos, const struct FWaveParams& Wave_Params, float Time, float Phase_Offset, class UObject* __WorldContext, struct FVector2D* XY, float* Z, struct FVector* Normal, float* Wave_Pos, float* Wave_Time, float* Wave_Sine);
	static void Exp2(float Depth, float Density, class UObject* __WorldContext, float* NewParam);
	static void Wavelength_to_Wavespeed(float Wavelength, class UObject* __WorldContext, float* s);
	static void Wave_Rotation_Setup(float Wave_Pos, float Wave_Time, float Crash_Offset, float Wavelength, const struct FVector& Wave_Direction, const struct FVector& Local_Pivot, float Beach_X_Pos, float Break_Distance, float Wave_Sine, float Crest_Power, float Start_Crash_Power, float End_Crash_Power, float MaxRotation, class UObject* __WorldContext, float* Rotation_Angle, struct FVector* World_Pivot, float* Raw_Shore_Mask);
	static void Finalize_Gerstner_Normal(const struct FVector& N, class UObject* __WorldContext, struct FVector* N_);
	static void Rotation_from_Normal(const struct FVector& X_Vector, const struct FVector& Z_Vector__Normal_, float Additional_Tilt, float Additional_Pitch, class UObject* __WorldContext, struct FRotator* Rotator);
	static void Gerstner_3_Waves(const struct FVector& Pos, int32 Num_Waves, TArray<struct FWaveParams>& Wave_Array, float Time, float Water_Depth, float Break_Tangent, float Break_Cos, class UObject* __WorldContext, struct FVector2D* XY, float* Z, struct FVector* Normal, float* Wave_0_Pos, float* Wave_0_Time, float* Wave_0_Sine);
	static void Gerstner_Wave_MPC_Shallow(const struct FVector& Pos, const struct FWaveParams& Wave_Params, float Time, float Phase_Offset, float Water_Depth__wave0_only_, class UObject* __WorldContext, struct FVector2D* XY, float* Z, struct FVector* Normal, float* Wave_Pos, float* Wave_Time, float* Wave_Sine);
	static void Water_Depth_to_Wavespeed(float Water_Depth, class UObject* __WorldContext, float* s);
	static void Harvest_Wave_Params(class UObject* __WorldContext);
	static void Generate_Wave_Spectrum(struct FWaveSpectrumSettings& Spectrum, class UObject* __WorldContext, TArray<struct FWaterWaveParams>* Waves);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPWaveLIbrary_C">();
	}
	static class UBPWaveLIbrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPWaveLIbrary_C>();
	}
};

}

