#pragma once

/*
* SDK generated by Dumper-8
*
* https://github.com/NotTacs/Dumper-8
*/

// Package: Chaos

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum Chaos.EClusterUnionMethod
// NumValues: 0x0006
enum class EClusterUnionMethod : uint8
{
	PointImplicit                            = 0,
	DelaunayTriangulation                    = 1,
	MinimalSpanningSubsetDelaunayTriangulation = 2,
	PointImplicitAugmentedWithMinimalDelaunay = 3,
	None                                     = 4,
	EClusterUnionMethod_MAX                  = 5,
};

// Enum Chaos.EFieldPhysicsDefaultFields
// NumValues: 0x0007
enum class EFieldPhysicsDefaultFields : uint8
{
	Field_RadialIntMask                      = 0,
	Field_RadialFalloff                      = 1,
	Field_UniformVector                      = 2,
	Field_RadialVector                       = 3,
	Field_RadialVectorFalloff                = 4,
	Field_EFieldPhysicsDefaultFields_Max     = 5,
	Field_MAX                                = 6,
};

// Enum Chaos.EFieldOutputType
// NumValues: 0x0004
enum class EFieldOutputType : uint8
{
	Field_Output_Vector                      = 0,
	Field_Output_Scalar                      = 1,
	Field_Output_Integer                     = 2,
	Field_Output_Max                         = 3,
};

// Enum Chaos.EFieldIntegerType
// NumValues: 0x0007
enum class EFieldIntegerType : uint8
{
	Integer_DynamicState                     = 0,
	Integer_ActivateDisabled                 = 1,
	Integer_CollisionGroup                   = 2,
	Integer_PositionAnimated                 = 3,
	Integer_PositionStatic                   = 4,
	Integer_TargetMax                        = 5,
	Integer_MAX                              = 6,
};

// Enum Chaos.EFieldScalarType
// NumValues: 0x0008
enum class EFieldScalarType : uint8
{
	Scalar_ExternalClusterStrain             = 0,
	Scalar_Kill                              = 1,
	Scalar_DisableThreshold                  = 2,
	Scalar_SleepingThreshold                 = 3,
	Scalar_InternalClusterStrain             = 4,
	Scalar_DynamicConstraint                 = 5,
	Scalar_TargetMax                         = 6,
	Scalar_MAX                               = 7,
};

// Enum Chaos.EFieldVectorType
// NumValues: 0x0007
enum class EFieldVectorType : uint8
{
	Vector_LinearForce                       = 0,
	Vector_LinearVelocity                    = 1,
	Vector_AngularVelocity                   = 2,
	Vector_AngularTorque                     = 3,
	Vector_PositionTarget                    = 4,
	Vector_TargetMax                         = 5,
	Vector_MAX                               = 6,
};

// Enum Chaos.EFieldPhysicsType
// NumValues: 0x0012
enum class EFieldPhysicsType : uint8
{
	Field_None                               = 0,
	Field_DynamicState                       = 1,
	Field_LinearForce                        = 2,
	Field_ExternalClusterStrain              = 3,
	Field_Kill                               = 4,
	Field_LinearVelocity                     = 5,
	Field_AngularVelociy                     = 6,
	Field_AngularTorque                      = 7,
	Field_InternalClusterStrain              = 8,
	Field_DisableThreshold                   = 9,
	Field_SleepingThreshold                  = 10,
	Field_PositionStatic                     = 11,
	Field_PositionAnimated                   = 12,
	Field_PositionTarget                     = 13,
	Field_DynamicConstraint                  = 14,
	Field_CollisionGroup                     = 15,
	Field_ActivateDisabled                   = 16,
	Field_PhysicsType_Max                    = 17,
};

// Enum Chaos.EFieldFalloffType
// NumValues: 0x0006
enum class EFieldFalloffType : uint8
{
	Field_FallOff_None                       = 0,
	Field_Falloff_Linear                     = 1,
	Field_Falloff_Inverse                    = 2,
	Field_Falloff_Squared                    = 3,
	Field_Falloff_Logarithmic                = 4,
	Field_Falloff_Max                        = 5,
};

// Enum Chaos.EFieldFilterType
// NumValues: 0x0005
enum class EFieldFilterType : uint8
{
	Field_Filter_Dynamic                     = 0,
	Field_Filter_Kinematic                   = 1,
	Field_Filter_Static                      = 2,
	Field_Filter_All                         = 3,
	Field_Filter_Max                         = 4,
};

// Enum Chaos.EFieldResolutionType
// NumValues: 0x0004
enum class EFieldResolutionType : uint8
{
	Field_Resolution_Minimal                 = 0,
	Field_Resolution_DisabledParents         = 1,
	Field_Resolution_Maximum                 = 2,
	Field_Resolution_Max                     = 3,
};

// Enum Chaos.EFieldCullingOperationType
// NumValues: 0x0004
enum class EFieldCullingOperationType : uint8
{
	Field_Culling_Inside                     = 0,
	Field_Culling_Outside                    = 1,
	Field_Culling_Operation_Max              = 2,
	Field_Culling_MAX                        = 3,
};

// Enum Chaos.EFieldOperationType
// NumValues: 0x0005
enum class EFieldOperationType : uint8
{
	Field_Multiply                           = 0,
	Field_Divide                             = 1,
	Field_Add                                = 2,
	Field_Substract                          = 3,
	Field_Operation_Max                      = 4,
};

// Enum Chaos.EWaveFunctionType
// NumValues: 0x0005
enum class EWaveFunctionType : uint8
{
	Field_Wave_Cosine                        = 0,
	Field_Wave_Gaussian                      = 1,
	Field_Wave_Falloff                       = 2,
	Field_Wave_Decay                         = 3,
	Field_Wave_Max                           = 4,
};

// Enum Chaos.ESetMaskConditionType
// NumValues: 0x0004
enum class ESetMaskConditionType : uint8
{
	Field_Set_Always                         = 0,
	Field_Set_IFF_NOT_Interior               = 1,
	Field_Set_IFF_NOT_Exterior               = 2,
	Field_MaskCondition_Max                  = 3,
};

// Enum Chaos.EEmissionPatternTypeEnum
// NumValues: 0x0003
enum class EEmissionPatternTypeEnum : uint8
{
	Chaos_Emission_Pattern_First_Frame       = 0,
	Chaos_Emission_Pattern_On_Demand         = 1,
	Chaos_Max                                = 2,
};

// Enum Chaos.EInitialVelocityTypeEnum
// NumValues: 0x0003
enum class EInitialVelocityTypeEnum : uint8
{
	Chaos_Initial_Velocity_User_Defined      = 0,
	Chaos_Initial_Velocity_None              = 1,
	Chaos_Max                                = 2,
};

// Enum Chaos.EGeometryCollectionPhysicsTypeEnum
// NumValues: 0x0009
enum class EGeometryCollectionPhysicsTypeEnum : uint8
{
	Chaos_AngularVelocity                    = 0,
	Chaos_DynamicState                       = 1,
	Chaos_LinearVelocity                     = 2,
	Chaos_InitialAngularVelocity             = 3,
	Chaos_InitialLinearVelocity              = 4,
	Chaos_CollisionGroup                     = 5,
	Chaos_LinearForce                        = 6,
	Chaos_AngularTorque                      = 7,
	Chaos_Max                                = 8,
};

// Enum Chaos.EObjectStateTypeEnum
// NumValues: 0x0007
enum class EObjectStateTypeEnum : uint8
{
	Chaos_NONE                               = 0,
	Chaos_Object_Sleeping                    = 1,
	Chaos_Object_Kinematic                   = 2,
	Chaos_Object_Static                      = 3,
	Chaos_Object_Dynamic                     = 4,
	Chaos_Object_UserDefined                 = 100,
	Chaos_Max                                = 101,
};

// Enum Chaos.EImplicitTypeEnum
// NumValues: 0x0006
enum class EImplicitTypeEnum : uint8
{
	Chaos_Implicit_Box                       = 0,
	Chaos_Implicit_Sphere                    = 1,
	Chaos_Implicit_Capsule                   = 2,
	Chaos_Implicit_LevelSet                  = 3,
	Chaos_Implicit_None                      = 4,
	Chaos_Max                                = 5,
};

// Enum Chaos.ECollisionTypeEnum
// NumValues: 0x0003
enum class ECollisionTypeEnum : uint8
{
	Chaos_Volumetric                         = 0,
	Chaos_Surface_Volumetric                 = 1,
	Chaos_Max                                = 2,
};

// Enum Chaos.EChaosBufferMode
// NumValues: 0x0005
enum class EChaosBufferMode : uint8
{
	Double                                   = 0,
	Triple                                   = 1,
	Num                                      = 2,
	Invalid                                  = 3,
	EChaosBufferMode_MAX                     = 4,
};

// Enum Chaos.EChaosThreadingMode
// NumValues: 0x0006
enum class EChaosThreadingMode : uint8
{
	DedicatedThread                          = 0,
	TaskGraph                                = 1,
	SingleThread                             = 2,
	Num                                      = 3,
	Invalid                                  = 4,
	EChaosThreadingMode_MAX                  = 5,
};

// Enum Chaos.EChaosSolverTickMode
// NumValues: 0x0005
enum class EChaosSolverTickMode : uint8
{
	Fixed                                    = 0,
	Variable                                 = 1,
	VariableCapped                           = 2,
	VariableCappedWithTarget                 = 3,
	EChaosSolverTickMode_MAX                 = 4,
};

// Enum Chaos.EGeometryCollectionCacheType
// NumValues: 0x0005
enum class EGeometryCollectionCacheType : uint8
{
	None                                     = 0,
	Record                                   = 1,
	Play                                     = 2,
	RecordAndPlay                            = 3,
	EGeometryCollectionCacheType_MAX         = 4,
};

// ScriptStruct Chaos.SolverCollisionFilterSettings
// 0x0010 (0x0010 - 0x0000)
struct FSolverCollisionFilterSettings final
{
public:
	bool                                          FilterEnabled;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-8 ])
	float                                         MinMass;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeed;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinImpulse;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct Chaos.SolverBreakingFilterSettings
// 0x0010 (0x0010 - 0x0000)
struct FSolverBreakingFilterSettings final
{
public:
	bool                                          FilterEnabled;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-8 ])
	float                                         MinMass;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeed;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinVolume;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct Chaos.SolverTrailingFilterSettings
// 0x0010 (0x0010 - 0x0000)
struct FSolverTrailingFilterSettings final
{
public:
	bool                                          FilterEnabled;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-8 ])
	float                                         MinMass;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeed;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinVolume;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct Chaos.ChaosSolverConfiguration
// 0x0050 (0x0050 - 0x0000)
struct FChaosSolverConfiguration final
{
public:
	int32                                         CollisionIterations;                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PushOutIterations;                                 // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PushOutPairIterations;                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClusterConnectionFactor;                           // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EClusterUnionMethod                           ClusterUnionConnectionType;                        // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGenerateCollisionData;                            // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-8 ])
	struct FSolverCollisionFilterSettings         CollisionFilterSettings;                           // 0x0014(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bGenerateBreakData;                                // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-8 ])
	struct FSolverBreakingFilterSettings          BreakingFilterSettings;                            // 0x0028(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bGenerateTrailingData;                             // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-8 ])
	struct FSolverTrailingFilterSettings          TrailingFilterSettings;                            // 0x003C(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bGenerateContactGraph;                             // 0x004C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-8 ])
};

// ScriptStruct Chaos.SolverCollisionData
// 0x006C (0x006C - 0x0000)
struct FSolverCollisionData final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AccumulatedImpulse;                                // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity1;                                         // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity2;                                         // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AngularVelocity1;                                  // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AngularVelocity2;                                  // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass1;                                             // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass2;                                             // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParticleIndex;                                     // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelsetIndex;                                     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParticleIndexMesh;                                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelsetIndexMesh;                                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct Chaos.SolverBreakingData
// 0x0030 (0x0030 - 0x0000)
struct FSolverBreakingData final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AngularVelocity;                                   // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParticleIndex;                                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParticleIndexMesh;                                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct Chaos.SolverTrailingData
// 0x0030 (0x0030 - 0x0000)
struct FSolverTrailingData final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AngularVelocity;                                   // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParticleIndex;                                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParticleIndexMesh;                                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct Chaos.RecordedFrame
// 0x00B8 (0x00B8 - 0x0000)
struct FRecordedFrame final
{
public:
	TArray<struct FTransform>                     Transforms;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 TransformIndices;                                  // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 PreviousTransformIndices;                          // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<bool>                                  DisabledFlags;                                     // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSolverCollisionData>           CollisionS;                                        // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSolverBreakingData>            Breakings;                                         // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<struct FSolverTrailingData>              Trailings;                                         // 0x0060(0x0050)(NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-8 ])
};

// ScriptStruct Chaos.RecordedTransformTrack
// 0x0010 (0x0010 - 0x0000)
struct FRecordedTransformTrack final
{
public:
	TArray<struct FRecordedFrame>                 Records;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

}

