#pragma once

/*
* SDK generated by Dumper-8
*
* https://github.com/NotTacs/Dumper-8
*/

// Package: ScoreUI

#include "Basic.hpp"

#include "ScoreUI_classes.hpp"
#include "ScoreUI_parameters.hpp"


namespace SDK
{

// Function ScoreUI.ScoreWidgetBase.BindToMutator_BP
// (Event, Protected, BlueprintEvent)

void UScoreWidgetBase::BindToMutator_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScoreWidgetBase", "BindToMutator_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ScoreUI.ScoreWidgetBase.HandleAircraftPhase_BP
// (Event, Protected, BlueprintEvent)

void UScoreWidgetBase::HandleAircraftPhase_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScoreWidgetBase", "HandleAircraftPhase_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ScoreUI.ScoreWidgetBase.OnScoreThresholdMet
// (Native, Protected)

void UScoreWidgetBase::OnScoreThresholdMet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScoreWidgetBase", "OnScoreThresholdMet");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ScoreUI.ScoreWidgetBase.OnScoreThresholdMet_BP
// (Event, Protected, BlueprintEvent)

void UScoreWidgetBase::OnScoreThresholdMet_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScoreWidgetBase", "OnScoreThresholdMet_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ScoreUI.ScoreWidgetBase.OnTeamScoredPoints
// (Native, Protected, HasOutParams)
// Parameters:
// const struct FScoreLTMTeamDataEntry&    TeamData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UScoreWidgetBase::OnTeamScoredPoints(const struct FScoreLTMTeamDataEntry& TeamData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScoreWidgetBase", "OnTeamScoredPoints");

	Params::ScoreWidgetBase_OnTeamScoredPoints Parms{};

	Parms.TeamData = std::move(TeamData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScoreUI.ScoreWidgetBase.UnbindFromMutator_BP
// (Event, Protected, BlueprintEvent)

void UScoreWidgetBase::UnbindFromMutator_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScoreWidgetBase", "UnbindFromMutator_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ScoreUI.ScoreBonusWindowWidget.OnBonusWindowEnded_BP
// (Event, Protected, BlueprintEvent)

void UScoreBonusWindowWidget::OnBonusWindowEnded_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScoreBonusWindowWidget", "OnBonusWindowEnded_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ScoreUI.ScoreBonusWindowWidget.OnBonusWindowPreviewStarted_BP
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// EScoreLTMBonusWindowCategory            BonusCategory                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      BonusCategoryText                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ServerPreviewEndTime                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScoreBonusWindowWidget::OnBonusWindowPreviewStarted_BP(EScoreLTMBonusWindowCategory BonusCategory, const class FText& BonusCategoryText, float ServerPreviewEndTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScoreBonusWindowWidget", "OnBonusWindowPreviewStarted_BP");

	Params::ScoreBonusWindowWidget_OnBonusWindowPreviewStarted_BP Parms{};

	Parms.BonusCategory = BonusCategory;
	Parms.BonusCategoryText = std::move(BonusCategoryText);
	Parms.ServerPreviewEndTime = ServerPreviewEndTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ScoreUI.ScoreBonusWindowWidget.OnBonusWindowStarted_BP
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// EScoreLTMBonusWindowCategory            BonusCategory                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      BonusCategoryText                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Multiplier                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ServerEndTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScoreBonusWindowWidget::OnBonusWindowStarted_BP(EScoreLTMBonusWindowCategory BonusCategory, const class FText& BonusCategoryText, float Multiplier, float ServerEndTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScoreBonusWindowWidget", "OnBonusWindowStarted_BP");

	Params::ScoreBonusWindowWidget_OnBonusWindowStarted_BP Parms{};

	Parms.BonusCategory = BonusCategory;
	Parms.BonusCategoryText = std::move(BonusCategoryText);
	Parms.Multiplier = Multiplier;
	Parms.ServerEndTime = ServerEndTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ScoreUI.ScoreTeammateStatusNotificationWidget.OnTeammateScoredPoints_BP
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// int32                                   PointsScored                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      ScoreTypeText                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bWasBonus                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScoreTeammateStatusNotificationWidget::OnTeammateScoredPoints_BP(int32 PointsScored, const class FText& ScoreTypeText, bool bWasBonus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScoreTeammateStatusNotificationWidget", "OnTeammateScoredPoints_BP");

	Params::ScoreTeammateStatusNotificationWidget_OnTeammateScoredPoints_BP Parms{};

	Parms.PointsScored = PointsScored;
	Parms.ScoreTypeText = std::move(ScoreTypeText);
	Parms.bWasBonus = bWasBonus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ScoreUI.ScoreTeamNotificationWidget.OnOwningTeamScoredPoints_BP
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// bool                                    bWasOwningPlayer                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PointsScored                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      ScoreTypeText                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   BigScoreThreshold                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWasBonus                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScoreTeamNotificationWidget::OnOwningTeamScoredPoints_BP(bool bWasOwningPlayer, int32 PointsScored, const class FText& ScoreTypeText, int32 BigScoreThreshold, bool bWasBonus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScoreTeamNotificationWidget", "OnOwningTeamScoredPoints_BP");

	Params::ScoreTeamNotificationWidget_OnOwningTeamScoredPoints_BP Parms{};

	Parms.bWasOwningPlayer = bWasOwningPlayer;
	Parms.PointsScored = PointsScored;
	Parms.ScoreTypeText = std::move(ScoreTypeText);
	Parms.BigScoreThreshold = BigScoreThreshold;
	Parms.bWasBonus = bWasBonus;

	UObject::ProcessEvent(Func, &Parms);
}

}

