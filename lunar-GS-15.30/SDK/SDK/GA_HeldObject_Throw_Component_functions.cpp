#pragma once

/*
* SDK generated by Dumper-8
*
* https://github.com/NotTacs/Dumper-8
*/

// Package: GA_HeldObject_Throw_Component

#include "Basic.hpp"

#include "GA_HeldObject_Throw_Component_classes.hpp"
#include "GA_HeldObject_Throw_Component_parameters.hpp"


namespace SDK
{

// Function GA_HeldObject_Throw_Component.GA_HeldObject_Throw_Component_C.ExecuteUbergraph_GA_HeldObject_Throw_Component
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_HeldObject_Throw_Component_C::ExecuteUbergraph_GA_HeldObject_Throw_Component(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_HeldObject_Throw_Component_C", "ExecuteUbergraph_GA_HeldObject_Throw_Component");

	Params::GA_HeldObject_Throw_Component_C_ExecuteUbergraph_GA_HeldObject_Throw_Component Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_HeldObject_Throw_Component.GA_HeldObject_Throw_Component_C.OnAbilityInputReleased
// (Event, Protected, BlueprintEvent)

void UGA_HeldObject_Throw_Component_C::OnAbilityInputReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_HeldObject_Throw_Component_C", "OnAbilityInputReleased");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_HeldObject_Throw_Component.GA_HeldObject_Throw_Component_C.K2_ActivateAbility
// (Event, Protected, BlueprintEvent)

void UGA_HeldObject_Throw_Component_C::K2_ActivateAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_HeldObject_Throw_Component_C", "K2_ActivateAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_HeldObject_Throw_Component.GA_HeldObject_Throw_Component_C.UpdateTrajectory
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UGA_HeldObject_Throw_Component_C::UpdateTrajectory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_HeldObject_Throw_Component_C", "UpdateTrajectory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_HeldObject_Throw_Component.GA_HeldObject_Throw_Component_C.CleanupTrajectoryIndicatorOnUnequip
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UGA_HeldObject_Throw_Component_C::CleanupTrajectoryIndicatorOnUnequip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_HeldObject_Throw_Component_C", "CleanupTrajectoryIndicatorOnUnequip");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_HeldObject_Throw_Component.GA_HeldObject_Throw_Component_C.InitTrajectoryVariables
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UGA_HeldObject_Throw_Component_C::InitTrajectoryVariables()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_HeldObject_Throw_Component_C", "InitTrajectoryVariables");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_HeldObject_Throw_Component.GA_HeldObject_Throw_Component_C.K2_OnEndAbility
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bWasCancelled                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UGA_HeldObject_Throw_Component_C::K2_OnEndAbility(bool bWasCancelled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_HeldObject_Throw_Component_C", "K2_OnEndAbility");

	Params::GA_HeldObject_Throw_Component_C_K2_OnEndAbility Parms{};

	Parms.bWasCancelled = bWasCancelled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_HeldObject_Throw_Component.GA_HeldObject_Throw_Component_C.AttemptSpawnThrownProjectile
// (BlueprintCallable, BlueprintEvent)

void UGA_HeldObject_Throw_Component_C::AttemptSpawnThrownProjectile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_HeldObject_Throw_Component_C", "AttemptSpawnThrownProjectile");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_HeldObject_Throw_Component.GA_HeldObject_Throw_Component_C.Throw
// (BlueprintCallable, BlueprintEvent)

void UGA_HeldObject_Throw_Component_C::Throw()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_HeldObject_Throw_Component_C", "Throw");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_HeldObject_Throw_Component.GA_HeldObject_Throw_Component_C.OnFinish_CE16214748EB548E38F0A4A5EBFDD545
// (BlueprintCallable, BlueprintEvent)

void UGA_HeldObject_Throw_Component_C::OnFinish_CE16214748EB548E38F0A4A5EBFDD545()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_HeldObject_Throw_Component_C", "OnFinish_CE16214748EB548E38F0A4A5EBFDD545");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_HeldObject_Throw_Component.GA_HeldObject_Throw_Component_C.Triggered_A44500A44ED1BD047C0A7FB13050E377
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&TargetData                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const struct FGameplayTag&              ApplicationTag                                         (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UGA_HeldObject_Throw_Component_C::Triggered_A44500A44ED1BD047C0A7FB13050E377(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_HeldObject_Throw_Component_C", "Triggered_A44500A44ED1BD047C0A7FB13050E377");

	Params::GA_HeldObject_Throw_Component_C_Triggered_A44500A44ED1BD047C0A7FB13050E377 Parms{};

	Parms.TargetData = std::move(TargetData);
	Parms.ApplicationTag = std::move(ApplicationTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_HeldObject_Throw_Component.GA_HeldObject_Throw_Component_C.Cancelled_A44500A44ED1BD047C0A7FB13050E377
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&TargetData                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const struct FGameplayTag&              ApplicationTag                                         (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UGA_HeldObject_Throw_Component_C::Cancelled_A44500A44ED1BD047C0A7FB13050E377(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_HeldObject_Throw_Component_C", "Cancelled_A44500A44ED1BD047C0A7FB13050E377");

	Params::GA_HeldObject_Throw_Component_C_Cancelled_A44500A44ED1BD047C0A7FB13050E377 Parms{};

	Parms.TargetData = std::move(TargetData);
	Parms.ApplicationTag = std::move(ApplicationTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_HeldObject_Throw_Component.GA_HeldObject_Throw_Component_C.Completed_A44500A44ED1BD047C0A7FB13050E377
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&TargetData                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const struct FGameplayTag&              ApplicationTag                                         (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UGA_HeldObject_Throw_Component_C::Completed_A44500A44ED1BD047C0A7FB13050E377(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_HeldObject_Throw_Component_C", "Completed_A44500A44ED1BD047C0A7FB13050E377");

	Params::GA_HeldObject_Throw_Component_C_Completed_A44500A44ED1BD047C0A7FB13050E377 Parms{};

	Parms.TargetData = std::move(TargetData);
	Parms.ApplicationTag = std::move(ApplicationTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_HeldObject_Throw_Component.GA_HeldObject_Throw_Component_C.PrethrowSetup
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UGA_HeldObject_Throw_Component_C::PrethrowSetup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_HeldObject_Throw_Component_C", "PrethrowSetup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_HeldObject_Throw_Component.GA_HeldObject_Throw_Component_C.SpawnThrownProjectile
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           ProjectileClass_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   ProjectileSpawnLocation                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  ProjectileSpawnDirection                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
// const struct FFortGameplayEffectContainerSpec&ExplosionEffectContainerSpec_0                         (BlueprintVisible, BlueprintReadOnly, Parm)
// float                                   ProjectileInitialSpeed                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ProjectileGravityScale_0                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AFortProjectileBase**             SpawnedProjectile_0                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_HeldObject_Throw_Component_C::SpawnThrownProjectile(class UClass* ProjectileClass_0, const struct FVector& ProjectileSpawnLocation, const struct FRotator& ProjectileSpawnDirection, const struct FFortGameplayEffectContainerSpec& ExplosionEffectContainerSpec_0, float ProjectileInitialSpeed, float ProjectileGravityScale_0, class AFortProjectileBase** SpawnedProjectile_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_HeldObject_Throw_Component_C", "SpawnThrownProjectile");

	Params::GA_HeldObject_Throw_Component_C_SpawnThrownProjectile Parms{};

	Parms.ProjectileClass_0 = ProjectileClass_0;
	Parms.ProjectileSpawnLocation = std::move(ProjectileSpawnLocation);
	Parms.ProjectileSpawnDirection = std::move(ProjectileSpawnDirection);
	Parms.ExplosionEffectContainerSpec_0 = std::move(ExplosionEffectContainerSpec_0);
	Parms.ProjectileInitialSpeed = ProjectileInitialSpeed;
	Parms.ProjectileGravityScale_0 = ProjectileGravityScale_0;

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnedProjectile_0 != nullptr)
		*SpawnedProjectile_0 = Parms.SpawnedProjectile_0;
}


// Function GA_HeldObject_Throw_Component.GA_HeldObject_Throw_Component_C.OnHeldObjectThrown
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortProjectileBase*              SpawnedProjectile_0                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_HeldObject_Throw_Component_C::OnHeldObjectThrown(class AFortProjectileBase* SpawnedProjectile_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_HeldObject_Throw_Component_C", "OnHeldObjectThrown");

	Params::GA_HeldObject_Throw_Component_C_OnHeldObjectThrown Parms{};

	Parms.SpawnedProjectile_0 = SpawnedProjectile_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_HeldObject_Throw_Component.GA_HeldObject_Throw_Component_C.OnHeldObjectSetup
// (Public, BlueprintCallable, BlueprintEvent)

void UGA_HeldObject_Throw_Component_C::OnHeldObjectSetup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_HeldObject_Throw_Component_C", "OnHeldObjectSetup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_HeldObject_Throw_Component.GA_HeldObject_Throw_Component_C.SetupDummyProjectile
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UGA_HeldObject_Throw_Component_C::SetupDummyProjectile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_HeldObject_Throw_Component_C", "SetupDummyProjectile");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_HeldObject_Throw_Component.GA_HeldObject_Throw_Component_C.UpdateTrajectorySpline
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UGA_HeldObject_Throw_Component_C::UpdateTrajectorySpline()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_HeldObject_Throw_Component_C", "UpdateTrajectorySpline");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_HeldObject_Throw_Component.GA_HeldObject_Throw_Component_C.PostThrowCleanup
// (Public, BlueprintCallable, BlueprintEvent)

void UGA_HeldObject_Throw_Component_C::PostThrowCleanup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_HeldObject_Throw_Component_C", "PostThrowCleanup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_HeldObject_Throw_Component.GA_HeldObject_Throw_Component_C.CleanupTrajectory
// (Public, BlueprintCallable, BlueprintEvent)

void UGA_HeldObject_Throw_Component_C::CleanupTrajectory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_HeldObject_Throw_Component_C", "CleanupTrajectory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_HeldObject_Throw_Component.GA_HeldObject_Throw_Component_C.SetupDummyProjectileSocketed
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UGA_HeldObject_Throw_Component_C::SetupDummyProjectileSocketed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_HeldObject_Throw_Component_C", "SetupDummyProjectileSocketed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_HeldObject_Throw_Component.GA_HeldObject_Throw_Component_C.HitValidSocket
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FHitResult&                HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool*                                   CanSocket                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UGA_HeldObject_Throw_Component_C::HitValidSocket(const struct FHitResult& HitResult, bool* CanSocket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_HeldObject_Throw_Component_C", "HitValidSocket");

	Params::GA_HeldObject_Throw_Component_C_HitValidSocket Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	if (CanSocket != nullptr)
		*CanSocket = Parms.CanSocket;
}


// Function GA_HeldObject_Throw_Component.GA_HeldObject_Throw_Component_C.Setup Late Trajectory Data
// (Public, BlueprintCallable, BlueprintEvent)

void UGA_HeldObject_Throw_Component_C::Setup_Late_Trajectory_Data()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_HeldObject_Throw_Component_C", "Setup Late Trajectory Data");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_HeldObject_Throw_Component.GA_HeldObject_Throw_Component_C.SetupSplineActors
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UGA_HeldObject_Throw_Component_C::SetupSplineActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_HeldObject_Throw_Component_C", "SetupSplineActors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_HeldObject_Throw_Component.GA_HeldObject_Throw_Component_C.GetProjectileTrajectoryPoints
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FVector>*                 OutSplinePoints                                        (Parm, OutParm, HasGetValueTypeHash)
// TArray<struct FVector>*                 OutSplineTangents                                      (Parm, OutParm, HasGetValueTypeHash)
// struct FHitResult*                      OutHitResult                                           (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void UGA_HeldObject_Throw_Component_C::GetProjectileTrajectoryPoints(TArray<struct FVector>* OutSplinePoints, TArray<struct FVector>* OutSplineTangents, struct FHitResult* OutHitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_HeldObject_Throw_Component_C", "GetProjectileTrajectoryPoints");

	Params::GA_HeldObject_Throw_Component_C_GetProjectileTrajectoryPoints Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutSplinePoints != nullptr)
		*OutSplinePoints = std::move(Parms.OutSplinePoints);

	if (OutSplineTangents != nullptr)
		*OutSplineTangents = std::move(Parms.OutSplineTangents);

	if (OutHitResult != nullptr)
		*OutHitResult = std::move(Parms.OutHitResult);
}


// Function GA_HeldObject_Throw_Component.GA_HeldObject_Throw_Component_C.SpawnTrajectoryIndicator
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSpawnOnEquip                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AFortProjectileTrajectory*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class AFortProjectileTrajectory* UGA_HeldObject_Throw_Component_C::SpawnTrajectoryIndicator(bool bSpawnOnEquip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_HeldObject_Throw_Component_C", "SpawnTrajectoryIndicator");

	Params::GA_HeldObject_Throw_Component_C_SpawnTrajectoryIndicator Parms{};

	Parms.bSpawnOnEquip = bSpawnOnEquip;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GA_HeldObject_Throw_Component.GA_HeldObject_Throw_Component_C.GetSpawnLocationAndRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UGA_HeldObject_Throw_Component_C::GetSpawnLocationAndRotation(struct FVector* Location, struct FRotator* Rotation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_HeldObject_Throw_Component_C", "GetSpawnLocationAndRotation");

	Params::GA_HeldObject_Throw_Component_C_GetSpawnLocationAndRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function GA_HeldObject_Throw_Component.GA_HeldObject_Throw_Component_C.GetOwningPlayer
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AFortPlayerPawn**                 Player_Pawn                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_HeldObject_Throw_Component_C::GetOwningPlayer(class AFortPlayerPawn** Player_Pawn) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_HeldObject_Throw_Component_C", "GetOwningPlayer");

	Params::GA_HeldObject_Throw_Component_C_GetOwningPlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Player_Pawn != nullptr)
		*Player_Pawn = Parms.Player_Pawn;
}


// Function GA_HeldObject_Throw_Component.GA_HeldObject_Throw_Component_C.K2_CanActivateAbility
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// const struct FGameplayAbilityActorInfo& ActorInfo                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
// const struct FGameplayAbilitySpecHandle&Handle                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTagContainer*           RelevantTags                                           (Parm, OutParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UGA_HeldObject_Throw_Component_C::K2_CanActivateAbility(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayAbilitySpecHandle& Handle, struct FGameplayTagContainer* RelevantTags) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_HeldObject_Throw_Component_C", "K2_CanActivateAbility");

	Params::GA_HeldObject_Throw_Component_C_K2_CanActivateAbility Parms{};

	Parms.ActorInfo = std::move(ActorInfo);
	Parms.Handle = std::move(Handle);

	UObject::ProcessEvent(Func, &Parms);

	if (RelevantTags != nullptr)
		*RelevantTags = std::move(Parms.RelevantTags);

	return Parms.ReturnValue;
}


// Function GA_HeldObject_Throw_Component.GA_HeldObject_Throw_Component_C.GetProjectileTrajectoryActor
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class AFortProjectileTrajectory>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

TSubclassOf<class AFortProjectileTrajectory> UGA_HeldObject_Throw_Component_C::GetProjectileTrajectoryActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_HeldObject_Throw_Component_C", "GetProjectileTrajectoryActor");

	Params::GA_HeldObject_Throw_Component_C_GetProjectileTrajectoryActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GA_HeldObject_Throw_Component.GA_HeldObject_Throw_Component_C.ShouldOnlyShowTrajectoryOnUse
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UGA_HeldObject_Throw_Component_C::ShouldOnlyShowTrajectoryOnUse() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_HeldObject_Throw_Component_C", "ShouldOnlyShowTrajectoryOnUse");

	Params::GA_HeldObject_Throw_Component_C_ShouldOnlyShowTrajectoryOnUse Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

